Instalacion cluster kubernetes

En VirtualBox crear red nat 192.168.10.0

En el file system crear data store a nivel raiz c:/

una carpeta por cada master node y worker node

En la guia hay pasos que se requieren ejecutar en todos los hosts y otros que solo se requieren ejecutar en los worker Nodes

(all host) para todos los nodos
(worker nodes) para los nodos worker
(master node ) para el nodo maestro

1.Actualizar gestor de paquetes (All hosts)
sudo apt-get update

2. Instalar Docker (All hosts)
sudo apt-get install docker.io -y

3. Instalar curl y http transports para agregar certificados (All hosts)
sudo apt-get install apt-transport-https curl -y

4. Agregar las llaves del checksum de k8s (All hosts)
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

5. Actualizar el repositorio de paquetes e instalar componentes K8s(All hosts):
sudo apt-get update
apt-cache madison kubelet
sudo apt-get install -y kubelet=1.28.12-1.1
sudo apt-get install -y kubeadm=1.28.12-1.1 
sudo apt-get install -y kubectl=1.28.12-1.1
sudo apt-mark hold kubelet kubeadm kubectl
 sudo apt-get install net-tools

5.1 opcional (all hosts)
si no se configuraron todas las tarjetas de red, realizar esta configuracion
ejecutar ip a

obtienes una salida asi:

2: enp0s3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    inet 192.168.100.162/24 metric 100 brd 192.168.100.255 scope global dynamic enp0s3
     
3: enp0s8: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    
    inet 192.168.10.9/24 metric 100 brd 192.168.10.255 scope global dynamic enp0s8
     
tomar nota de los nombres de las interfaces y aÃ±adirlos al netplan:

sudo nano /etc/netplan/01-netcfg.yaml


network:
  version: 2
  ethernets:
    enp0s3:
      dhcp4: true
    enp0s8:
      dhcp4: true

sudo netplan apply

sudo nano /etc/dhcp/dhclient.conf

sudo systemctl restart systemd-networkd

6. Modificar las entradas del archivo hosts con las direcciones IP nat de cada nodo (All hosts)
edit the file "/etc/hosts"
sudo nano /etc/hosts
master  192.168.10.9
worker1 192.168.10.10
worker2 192.168.10.7

7. Deshabilitar SWAP (All hosts)
sudo swapoff -a
edit /etc/fstab to remove the swap entry

8. Iniciar el cluster solo en Master node
sudo kubeadm init --control-plane-endpoint master:6443 --pod-network-cidr 10.10.0.0/16

9. configurar el cliente kubectl para que se autentique y conecte al cluster(Only on Master node)
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

10. Configurar el CNI (Calico) (Only on Master node)
Install the operator on your cluster.

kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.1/manifests/tigera-operator.yaml


Download the custom resources necessary to configure Calico.

curl https://raw.githubusercontent.com/projectcalico/calico/v3.28.1/manifests/custom-resources.yaml -O


If you wish to customize the Calico install, customize the downloaded custom-resources.yaml manifest locally.

Create the manifest to install Calico.

kubectl create -f custom-resources.yaml

Verify Calico installation in your cluster.

watch kubectl get pods -n calico-system

You should see a result similar to the below.

NAMESPACE     NAME                READY   STATUS                  RESTARTS         AGE
kube-system   calico-node-txngh   1/1     Running                   0              54s

Modificar la variable CALICO_IPV4POOL_CIDR y setear el rango de direcciones IP del pod network

11. Generar token para conectar el worker Node al master node (Only on Master node)
#Create a new Token
sudo kubeadm token create
#List Tokens created
sudo kubeadm token list
#Find Certificate Hash on Master
openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | 
   openssl rsa -pubin -outform der 2>/dev/null | 
   openssl dgst -sha256 -hex | sed 's/^.* //'

12. Conectar nodos worker al master node (Only on Worker nodes)
sudo kubeadm join --token TOKEN_ID CONTROL_PLANE_HOSTNAME:CONTROL_PLANE_PORT --discovery-token-ca-cert-hash sha256:HASH
(Formed using outputs from step 10, treat CAPS as variables to be replaced)

13. Habilitar cargas de trabajo en nodo master (Only on Master Node)
kubectl taint nodes --all node-role.kubernetes.io/master-

14. Sample Deployment file:
=========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
=========================

15. Applicar el deployment:
kubectl apply -f FILE_NAME

16. para obtener la direccion del POD 

kubectl get pod <nombre-del-pod> -n <nombre-del-namespace> -o jsonpath='{.status.podIP}'

para obtener la direccion completa
echo "$(kubectl get pod <nombre-del-pod> -n <nombre-del-namespace> -o jsonpath='{.status.podIP}' | sed 's/\./-/g').<nombre-del-namespace>.pod.cluster.local"

conectarse a un pod
kubectl get pods -o wide

kubectl exec -it nginx-deployment-7c5ddbdf54-6b5r6 -- /bin/bash 

opcional instalar ping ejecutar dentro del contenedor 
apt update 
apt install inetutils-ping

ejecutar desde un pod

ping 10-10-189-101.default.pod.cluster.local
